#include <ESP8266WiFi.h>
#include <WiFiManager.h>
#include <ArduinoJson.h>
#include <FastBot.h>
#include <EEPROM.h>

// Credenziali Wi-Fi
const char *ssid = "Telecom-15744621";
const char *password = "fZET6ouLwc3wYG6WyfDy4fUL";
#define CHAT_ID "217950359"

// Definizione dei PIN e altre variabili globali
const int maxPins = 10; // Numero massimo di PIN configurabili

struct PinConfig
{
  int pin;
  String name;
  String type; // "o= output", "i=input", "p = input_pullup"
};

PinConfig pinConfigs[maxPins];
int pinConfigCount = 0;

byte depth = 0;
int32_t menuID = 0;
String currentPinType = "";
int currentPinIndex = 0;

// Variabile di debug
int debugMode = 1; // 0: nessun debug, 1: seriale, 2: telegram, 3: entrambi

// Token del bot di Telegram
const char *TELEGRAM_BOT_TOKEN = "391032347:AAFBVponQ6ck0vd6W930dPzf6Ygj_yi5D9g";

enum PinConfigStep
{
  NONE,
  CONFIG_PIN,
  CONFIG_NAME,
  CONFIG_TYPE,
  CONFIG_CONFIRM
};

PinConfigStep currentPinStep = NONE;

// WiFiManager per gestire la connessione Wi-Fi
WiFiManager wm;

// FastBot per gestire il bot di Telegram
FastBot bot(TELEGRAM_BOT_TOKEN);

void debug(String message)
{
  if (debugMode == 1 || debugMode == 3)
  {
    Serial.println(message);
  }
  if (debugMode == 2 || debugMode == 3)
  {
    bot.sendMessage(message);
  }
}

void resetEEPROM()
{
  // Pulisci la EEPROM scrivendo zeri in tutte le posizioni di memoria
  for (int i = 0; i < 512; i++)
  {
    EEPROM.write(i, 0);
  }
  EEPROM.commit();
  debug("EEPROM resettata con successo.");
}

void saveConfig()
{
  EEPROM.begin(512);

  // Leggi la configurazione attuale dalla EEPROM
  String currentConfig;
  for (int i = 0; i < 512; i++)
  {
    currentConfig += char(EEPROM.read(i));
  }

  // Deserializza la configurazione attuale in un documento JSON
  StaticJsonDocument<512> doc;
  DeserializationError error = deserializeJson(doc, currentConfig);
  if (error)
  {
    debug("Errore nella deserializzazione della configurazione attuale: " + String(error.c_str()));
    return;
  }

  // Aggiungi la nuova configurazione al documento JSON esistente
  for (int i = 0; i <= pinConfigCount; i++)
  {
    JsonObject pin = doc.createNestedObject();
    pin["pin"] = pinConfigs[i].pin;
    pin["name"] = pinConfigs[i].name;
    pin["type"] = pinConfigs[i].type;
  }
  doc["debugMode"] = debugMode;

  // Serializza il documento JSON in una stringa JSON
  String json;
  serializeJson(doc, json);

  // Controlla la lunghezza della stringa JSON
  if (json.length() > 512)
  {
    debug("Errore: Configurazione supera la capacit√† di EEPROM");
    return;
  }

  // Salva la nuova configurazione nella EEPROM
  for (int i = 0; i < json.length(); i++)
  {
    EEPROM.write(i, json[i]);
  }
  EEPROM.commit();
}

void loadConfig()
{
  EEPROM.begin(512);
  String json;
  for (int i = 0; i < 512; i++)
  {
    json += char(EEPROM.read(i));
  }
  debug(json);
  StaticJsonDocument<512> doc;
  DeserializationError error = deserializeJson(doc, json);
  if (error)
  {
    debug("Errore nella deserializzazione: " + String(error.c_str()));
    return;
  }
  pinConfigCount = doc.size() - 1; // Assumendo che l'ultima voce sia debugMode
  debug("Numero pin configurati : " + String(pinConfigCount));
  for (int i = 0; i <= pinConfigCount; i++)
  {
    JsonObject pin = doc[i];
    pinConfigs[i].pin = pin["pin"];
    pinConfigs[i].name = pin["name"].as<String>();
    pinConfigs[i].type = pin["type"].as<String>();
    debug("Pin configurato come : " + String(pin));
  }
  debugMode = doc["debugMode"];
  debug("Debug mode : " + String(debugMode));
}

void configurePins()
{
  for (int i = 0; i <= pinConfigCount; i++)
  {
    String msg = "";
    msg += "Numero : " + String(pinConfigCount);
    msg += "\nName    : " + String(pinConfigs[i].name);
    msg += "\nPin    : " + String(pinConfigs[i].pin);
    msg += "\nType    : " + String(pinConfigs[i].type);
    debug(msg);
    if (pinConfigs[i].type == "o")
    {
      pinMode(pinConfigs[i].pin, OUTPUT);
    }
    else if (pinConfigs[i].type == "i")
    {
      pinMode(pinConfigs[i].pin, INPUT);
    }
    else if (pinConfigs[i].type == "p")
    {
      pinMode(pinConfigs[i].pin, INPUT_PULLUP);
    }
  }
}

void handleMenu(int menuNum, const char *answers, const char *callbacks)
{
  String menu = "Answer " + String(menuNum) + ".1 \t Answer " + String(menuNum) + ".2 \t Answer " + String(menuNum) + ".3 \n Back";
  bot.editMenuCallback(menuID, menu, callbacks);
  depth = 1;
}

void newMsg(FB_msg &msg)
{
  debug("Ricevuto messaggio: " + msg.toString());

  if (msg.OTA)
    bot.update();

  if (msg.data == "back")
  {
    if (depth == 1)
    {
      handleMenu(0, "menu_1, menu_2, menu_3, back", "answ_1_1, answ_1_2, answ_1_3, back");
      depth = 0;
    }
    else if (depth == 2)
    {
      handleMenu(1, "config, manage_pins, debug_menu, back", "config, manage_pins, debug_menu, back");
      depth = 1;
    }
    else if (depth == 3){

    }
  }

  if (msg.text == "/menu")
  {
    String menu = F("Configurazione \t Gestione Pin \t Debug \n Back");
    String call = F("config, manage_pins, debug_menu, back");
    bot.inlineMenuCallback("Setup", menu, call);
    menuID = bot.lastBotMsg();
    depth = 1;
  }

  if (msg.data == "config")
  {
    String configMenu = F("PIN IO \t Altre Configurazioni \n ResetDev \t Back");
    String configCall = F("pin_io, other_configs, reset_eeprom, back");
    bot.editMenuCallback(menuID, configMenu, configCall);
    depth = 2;
  }

  if (msg.data == "reset_eeprom")
  {
    resetEEPROM();
    bot.sendMessage("EEPROM resettata.");
  }

  if (msg.data == "pin_io")
  {
    bot.sendMessage("Inserisci il PIN da configurare:");
    currentPinStep = CONFIG_PIN;
    depth = 3;
  }

  if (msg.data == "other_configs")
  {
    // Aggiungere gestione di altre configurazioni
  }
  String pinTypeMenu = "";
  String pinTypeCall = "";
  switch (currentPinStep)
  {
  case CONFIG_PIN:
    if (msg.text == "0000")
    {
      bot.sendMessage("Configurazione del PIN annullata.");
      currentPinStep = NONE;
    }
    else if (isDigit(msg.text[0]))
    {
      pinConfigs[currentPinIndex].pin = msg.text.toInt();
      debug("Pin : " + String(pinConfigs[currentPinIndex].pin));
      bot.sendMessage("Inserisci il nome del PIN:");
      currentPinStep = CONFIG_NAME;
    }
    break;

  case CONFIG_NAME:
    pinConfigs[currentPinIndex].name = msg.text;
    pinTypeMenu = F("Output \t Input \t Input Pullup \n Back");
    pinTypeCall = F("output, input, input_pullup, back");
    bot.inlineMenuCallback("Seleziona il tipo di PIN:", pinTypeMenu, pinTypeCall);
    currentPinStep = CONFIG_TYPE;
    break;

  case CONFIG_TYPE:
    if (msg.data == "output" || msg.data == "input" || msg.data == "input_pullup")
    {
      pinConfigs[currentPinIndex].type = msg.data;
      bot.sendMessage("Configurazione del PIN completata. Vuoi configurare un altro PIN? (S/N)");
      currentPinStep = CONFIG_CONFIRM;
    }
    break;

  case CONFIG_CONFIRM:
    if (msg.text == "S" || msg.text == "s")
    {
      currentPinIndex++;
      bot.sendMessage("Inserisci il PIN da configurare:");
      currentPinStep = CONFIG_PIN;
    }
    else if (msg.text == "N" || msg.text == "n")
    {
      saveConfig();
      configurePins();
      bot.sendMessage("Configurazione salvata e PIN impostati.");
      currentPinStep = NONE;
      pinConfigCount++;
    }
    break;

  default:
    currentPinStep = CONFIG_PIN;
    break;
  }

  if (msg.data == "manage_pins")
  {
    String manageMenu = F("Controlla Output \t Visualizza Input \t Panoramica PIN \n Back");
    String manageCall = F("control_output, view_input, pin_overview, back");
    bot.editMenuCallback(menuID, manageMenu, manageCall);
    depth = 2;
  }

  if (msg.data == "control_output")
  {
    String outputMenu = "";
    for (int i = 0; i <= pinConfigCount; i++)
    {
      if (pinConfigs[i].type == "output")
      {
        outputMenu += pinConfigs[i].name + " \t";
      }
    }
    outputMenu += "\nBack";
    String outputCall = "";
    for (int i = 0; i <= pinConfigCount; i++)
    {
      if (pinConfigs[i].type == "output")
      {
        outputCall += "toggle_" + pinConfigs[i].name + ",";
      }
    }
    outputCall += "back";
    bot.editMenuCallback(menuID, outputMenu, outputCall);
    depth = 3;
  }

  if (msg.data.startsWith("toggle_"))
  {
    String pinName = msg.data.substring(7);
    for (int i = 0; i <= pinConfigCount; i++)
    {
      if (pinConfigs[i].name == pinName)
      {
        int currentState = digitalRead(pinConfigs[i].pin);
        digitalWrite(pinConfigs[i].pin, !currentState);
        debug("PIN " + pinName + " impostato a " + String(!currentState));
      }
    }
  }

  if (msg.data == "view_input")
  {
    String inputStatus = "";
    for (int i = 0; i <= pinConfigCount; i++)
    {
      if (pinConfigs[i].type == "input" || pinConfigs[i].type == "input_pullup")
      {
        int state = digitalRead(pinConfigs[i].pin);
        inputStatus += pinConfigs[i].name + ": " + String(state) + "\n";
      }
    }
    bot.sendMessage(inputStatus);
    debug("Stato dei PIN di input inviato.");
  }

  if (msg.data == "pin_overview")
  {
    String pinOverview = "";
    for (int i = 0; i <= pinConfigCount; i++)
    {
      pinOverview += pinConfigs[i].name + ": " + pinConfigs[i].type + "\n";
    }
    bot.sendMessage(pinOverview);
    debug("Panoramica dei PIN inviata.");
  }

  if (msg.data == "debug_menu")
  {
    String debugMenu = F("Debug Serial \t Debug Telegram \t Debug Entrambi \t Disabilita Debug \n Back");
    String debugCall = F("debug_serial, debug_telegram, debug_both, debug_none, back");
    bot.editMenuCallback(menuID, debugMenu, debugCall);
    depth = 2;
  }

  if (msg.data == "debug_serial")
  {
    debugMode = 1;
    saveConfig();
    bot.sendMessage("Debug seriale abilitato.");
    debug("Debug seriale abilitato.");
  }
  if (msg.data == "debug_telegram")
  {
    debugMode = 2;
    saveConfig();
    bot.sendMessage("Debug su Telegram abilitato.");
    debug("Debug su Telegram abilitato.");
  }
  if (msg.data == "debug_both")
  {
    debugMode = 3;
    saveConfig();
    bot.sendMessage("Debug su seriale e Telegram abilitato.");
    debug("Debug su seriale e Telegram abilitato.");
  }
  if (msg.data == "debug_none")
  {
    debugMode = 0;
    saveConfig();
    bot.sendMessage("Debug disabilitato.");
  }
}

void setup()
{
  // Inizializza la comunicazione seriale
  Serial.begin(9600);

  // Configura la modalit√† Wi-Fi come stazione
  WiFi.mode(WIFI_STA);

  // Configura WiFiManager
  wm.setConfigPortalBlocking(false);
  wm.setConfigPortalTimeout(60);
  if (wm.autoConnect("Irrigatore"))
  {
    Serial.println("Connesso...yeey :)");
  }
  else
  {
    Serial.println("Portale di configurazione in esecuzione");
  }

  // Imposta i comandi del bot
  bot.setChatID(CHAT_ID);
  bot.attach(newMsg);

  // Invia un messaggio per indicare l'inizializzazione dell'irrigatore
  bot.sendMessage("Irrigatore inizializzato \n /menu : apri il menu setup\n");
  bot.answer("Sicuro?");

  // Carica la configurazione dei PIN dalla EEPROM
  loadConfig();
  configurePins();
}

void loop()
{
  // Gestisci il WiFiManager
  wm.process();

  // Gestisci i messaggi del bot di Telegram
  bot.tick();
}
